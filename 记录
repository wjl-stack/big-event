注册：
    注册参数校验：
        可以使用@Validation注解来实现
        在需要传入的参数前@Pattern(regexp = "^\\S{5,16}$"，但是浏览器会输出错误码：500
        所以需要进行全局失败异常处理，新建一个类，使用@RestControllerAdvice，@ExeptionHandler注解

登录：
    令牌：JWT技术，一种简洁的自包含的格式，用于通信双方以json数据格式安全的传输信息
        组成：第一部分：头，记录令牌类型，签名算法等
             第二部分：有效载荷，携带一些自定义信息、默认信息等
             第三部分：签名，防止令牌被篡改，加入指定密钥
    拦截器：使所有的请求都经过拦截器，避免在接口中重复验证,注意登录和注册接口放行

获取用户信息：
    使用 @GetMapping 获取数据。
    使用 @PostMapping 提交数据或创建资源。
    在UserController类中创建UserInfo方法，获取token，并通过@RequestHeader获取请求头
    使用
        Map<String,Object> map =  JwtUtil.parseToken(token);
    解析token，最后返回给Result类
    复用token解析信息
        ThreadLocal：提供线程局部变量，存取数据是安全的，互不影响
                     用完记得remove（）方法释放

更新用户信息：
    请求信息是json对象，封装到user实体类对象中
    @RequestBody能够将json对象自动转换成实体类对象
    controller层中调用service层中的更新方法，mapper层中也要定义相关的sql语句
    参数校验：
        @NotNull限定当前的值不为null
        @NotEmpty不为null且不为空
        @Email满足邮箱格式

更新用户头像：
    patch请求，使用@PatchMapper响应请求，使用@URL来确保用户输入的avatarUrl符合规范
    在sql语句中使用now()获取系统当前时间
    请求参数不包含id，通过TreadLocal中存储的参数，定义一个map集合，调用get方法获得id

更新用户密码：
    请求参数是oldpwd，newpwd等，与数据库中的参数不一致，因此需要定义map集合来接受参数
    若原密码，新密码，repwd有一个为空，那么返回缺失必要的参数
    调用userService根据用户名拿到原密码，在跟oldpwd比对
    再根据校验原密码是否正确，两次输入的新密码是否一样，新密码是否和原密码一样判断是否调用修改方法
    请求参数不包含id，通过TreadLocal中存储的参数，定义一个map集合，调用get方法获得id
    最后通过密文方式更改密码
        userMapper.updatePwd(Md5Util.getMD5String(newPwd),id);

添加文章分类：
    在插入文章分类时，没有userid属性，只有creatuser，creatuser是外键，因此不能在mapper接口中定义add方法时直接传入，
    需要在service实现类中定义一个map集合，调用get方法获得id，再使用 category.setCreateUser(userid)方法传入
    参数校验：
            @NotNull限定当前的值不为null
            @NotEmpty不为null且不为空
            @Email满足邮箱格式
    并在controller实体类对象前加上@Validated注解 public Result add(@RequestBody @Validated Category category)

文章分类列表：
    与添加文章分类一样使用/category进行访问，但区分方法是请求方式，上个是post请求，这个是get请求
    controller层定义一个list集合对象来接收底层传来的数据
    在实体类中通过@JsonFormat(pattern = "YYYY-MM-DD HH:mm:ss")来自定义参数输出格式